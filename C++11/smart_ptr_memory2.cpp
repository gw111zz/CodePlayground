#include <iostream>

struct MyObj {
    int x[100000];
};

/**
 * Compile with: g++ -g -std=c++11 smart_ptr_memory2.cpp -o smart_ptr_memory2
 * Run Valgrind with: valgrind --tool=massif --time-unit=B  ./smart_ptr_memory2
 * Read the massive output with: ms_print <massif file generated by previous step> | less 
 *
 * 
 *     KB
 * 806.3^                                    ##################
 *      |                                    #
 *      |                                    #
 *      |                                    #
 *      |                                    #
 *      |                                    #
 *      |                                    #
 *      |                                    #
 *      |                                    #
 *      |                                    #
 *      |                   :::::::::::::::::#                 :::::::::::::::::
 *      |                   :                #                 :
 *      |                   :                #                 :
 *      |                   :                #                 :
 *      |                   :                #                 :
 *      |                   :                #                 :
 *      |                   :                #                 :
 *      |                   :                #                 :
 *      |                   :                #                 :
 *      |                   :                #                 :
 *    0 +----------------------------------------------------------------------->MB
 *      0                                                                   1.563
 */

int main() {

    // Create a large object using std::make_shared and make a weak_ptr point to it.
    // Reset the strong reference (meaning we don't want the object anymore) but keep the 
    // weak reference around, then create another large object. When this second large 
    // object is created, the memory from the previous object and the control block has not
    // yet been freed because there is still a weak reference around. Even the memory 
    // occupied by the large object hasn't been freed yet because a single allocation was made
    // to create the object and the control block. The memory profile is quite different from
    // smart_ptr_memory.cpp
    std::weak_ptr<MyObj> weakObj;
    {

        std::shared_ptr<MyObj> strongObj = std::make_shared<MyObj>(); // Single allocation with make_shared

        weakObj = strongObj; // Strong count = 1; weak count = 1

        strongObj.reset(); // Strong count = 0; weak count = 1
    }

    // Strong count = 0; weak count = 1; memory for the whole object and the control block has not been freed as a weak reference
    // still exists when this next object is created.

    std::shared_ptr<MyObj> strongObj2 = std::make_shared<MyObj>(); // Another single allocation with make_shared

    return 0;
}
